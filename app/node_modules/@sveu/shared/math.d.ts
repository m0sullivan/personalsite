import { z as Sequential, B as PrecisionOptions } from './types-8a2f2352.js';
import 'svelte/store';

/**
 * Sums all the numbers in given sequences.
 *
 * @param args - The sequences to sum.
 *
 * @example
 * ```ts
 * sum(1, 2, 3) // 6
 * sum([1, 2, 3]) // 6
 * sum([1, 2], 3) // 6
 * sum(1, [2, 3]) // 6
 * ```
 *
 * @returns The sum of all the numbers in given sequences.
 */
declare function sum(...args: Sequential): number;
/**
 * Subtract all the numbers in given sequences.
 *
 * @param args - The sequences to subtract.
 *
 * @example
 * ```ts
 * subtract(1, 2, 3) // -4
 * subtract([1, 2, 3]) // -4
 * subtract([1, 2], 3) // -4
 * subtract(1, [2, 3]) // -4
 * ```
 *
 * @returns The subtraction of all the numbers in given sequences.
 */
declare function subtract(...args: Sequential): number;
/**
 * Multiply all the numbers in given sequences.
 *
 * @param args - The sequences to multiply.
 *
 * @example
 * ```ts
 * multiply(1, 2, 3) // 6
 * multiply([1, 2, 3]) // 6
 * multiply([1, 2], 3) // 6
 * multiply(1, [2, 3]) // 6
 * ```
 *
 * @returns The multiplication of all the numbers in given sequences.
 */
declare function multiply(...args: Sequential): number;
/**
 * Divide all the numbers in given sequences.
 *
 * @param args - The sequences to divide.
 *
 * @example
 * ```ts
 * divide(1, 2, 3) // 0.16666666666666666
 * divide([1, 2, 3]) // 0.16666666666666666
 * divide([1, 2], 3) // 0.16666666666666666
 * divide(1, [2, 3]) // 0.16666666666666666
 * ```
 *
 * @returns The division of all the numbers in given sequences.
 */
declare function divide(...args: Sequential): number;
/**
 * Calculates the average of all the numbers in given sequences.
 *
 * @param args - The sequences to calculate the average.
 *
 * @example
 * ```ts
 * average(1, 2, 3) // 2
 * average([1, 2, 3]) // 2
 * average([1, 2], 3) // 2
 * average(1, [2, 3]) // 2
 * ```
 *
 * @returns The average of all the numbers in given sequences.
 */
declare function average(...args: Sequential): number;
/**
 * Get the maximum number of sequences
 *
 * @param args - The sequences to get the maximum number.
 *
 * @example
 * ```ts
 * max(1, 2, 3) // 3
 * max([1, 2, 3]) // 3
 * max([1, 2], 3) // 3
 * max(1, [2, 3]) // 3
 * ```
 *
 * @returns The maximum number of sequences
 */
declare function max(...args: Sequential): number;
/**
 * Get the minimum number of sequences
 *
 * @param args - The sequences to get the minimum number.
 *
 * @example
 * ```ts
 * min(1, 2, 3) // 1
 * min([1, 2, 3]) // 1
 * min([1, 2], 3) // 1
 * min(1, [2, 3]) // 1
 * ```
 *
 * @returns The minimum number of sequences
 */
declare function min(...args: Sequential): number;

/**
 * Clamp a value between two other values.
 *
 * @param value - The value to clamp
 *
 * @param min - The minimum value
 *
 * @param max - The maximum value
 *
 * @example
 * ```ts
 * clamp(5, 1, 10) // 5
 * clamp(0, 1, 10) // 1
 * clamp(15, 1, 10) // 10
 * ```
 *
 * @returns The clamped value
 */
declare function clamp(value: number, min: number, max: number): number;

/**
 * Set the precision of a number.
 *
 * @param value - The value to set the precision of
 *
 * @param digits - The number of digits to keep
 *
 * @param options - The options to use
 * - `math` - Method to use for rounding, floor or ceil or round (default: "round")
 *
 * @example
 * ```ts
 * precision(45.125, 2) // 45.13
 *
 * precision(45.125, 2, { math: "ceil" }) // 45.13
 *
 * precision(45.129, 2, { math: "floor" }) // 45.12
 *
 * precision(45.125, 2, { math: "round" }) // 45.13
 * ```
 * @returns The value with the precision set
 *
 */
declare function precision(value: number, digits: number, options?: PrecisionOptions): number | string;

/**
 * Returns a random number between min (inclusive) and max (exclusive)
 *
 * @param min - The minimum number.
 *
 * @param max - The maximum number.
 *
 * @example
 * ```ts
 * random(1, 10) // 1
 *
 * random(1, 10) // 5
 * ```
 *
 * @returns a random number between min (inclusive) and max (exclusive).
 */
declare function random(min: number, max: number): number;

export { average, clamp, divide, max, min, multiply, precision, random, subtract, sum };
