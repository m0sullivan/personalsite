import {
  toWritable,
  type
} from "./chunk-LRJQKUWD.js";

// src/watchable/index.ts
function watchable(initialValue, fn) {
  const { subscribe, update } = toWritable(initialValue);
  let active = true;
  return {
    subscribe,
    set: (value) => {
      update((old_value) => {
        if (active)
          fn(old_value, value);
        return value;
      });
    },
    pause: () => {
      active = false;
    },
    resume: () => {
      active = true;
    }
  };
}

// src/len/index.ts
function len(item) {
  if (item instanceof Map)
    return item.size;
  if (item instanceof Set)
    return item.size;
  if (item instanceof Object)
    return Object.keys(item).length;
  if (item instanceof Array)
    return item.length;
  if (typeof item === "string")
    return item.length;
  throw new TypeError(
    `len() argument must be a sequence or collection, not ${type(item)}`
  );
}

export {
  watchable,
  len
};
