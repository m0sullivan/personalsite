import { d as FunctionArgs } from './types-8a2f2352.js';
import 'svelte/store';

/**
 * A function that takes a list of functions and executes them in order.
 *
 * @param funcs - The list of functions to execute.
 *
 *
 */
declare function chain(...funcs: FunctionArgs[]): (...args: any[]) => void;

type Fn<TArgs = any, KReturn = any | void> = (...args: TArgs[]) => KReturn;
/**
 * a composition of functions, each function is given the next function as an argument and must call it to continue executing.
 *
 * @param fn - the function to compose
 *
 * @returns the composed function
 */
declare function compose(...fn: Fn[]): Fn<any, any>;

/**
 * Create a function by partially applying arguments to another function.
 *
 * @param fn -  The function to partially apply arguments to.
 *
 * @param args -  The arguments to partially apply to the function.
 *
 * @returns A function that takes the remaining arguments to the function.
 */
declare function partial(fn: FunctionArgs, ...args: any[]): (...rest: any[]) => void;

export { Fn, chain, compose, partial };
