import * as svelte_store from 'svelte/store';
import { p as Dict } from './types-8a2f2352.js';

/**
 * Checks if an object contains all the given keys
 *
 * @param obj - object to check
 *
 * @param keys - keys to check
 *
 * @example
 * ```ts
 * contains({ a: 1, b: 2 }, "a") // true
 * contains({ a: 1, b: 2 }, "a", "b") // true
 * contains({ a: 1, b: 2 }, "a", "b", "c") // false
 * ```
 *
 * @returns boolean
 */
declare function contains(obj: object, ...keys: string[]): boolean;

/**
 * Enhance a object with some useful methods.
 *
 * @param obj - The object to enhance.
 *
 * @example
 * ```ts
 * const dict = enhance({ a: 1, b: 2 })
 * dict.subscribe((n) => console.log(n))
 * dict.add("c", 3)
 * dict.clear()
 * dict.contains("a")
 * dict.copy()
 * dict.fromKeys(["a", "b", "c"])
 * dict.get("a")
 * dict.invert()
 * dict.keys()
 * dict.pop("a")
 * dict.popitem()
 * dict.values()
 * ```
 *
 * @returns The enhanced object.
 * - `subscribe` - A svelte store.
 * - `add` - Add a value to the dict.
 * - `clear` - Clear the dict.
 * - `contains` - Check if the dict contains a key.
 * - `copy` - Copy the dict.
 * - `fromKeys` - Create a dict from keys.
 * - `get` - Get a value from the dict.
 * - `invert` - Invert the dict.
 * - `keys` - Get the keys of the dict.
 * - `pop` - Remove a value from the dict.
 * - `popitem` - Remove the last item from the dict.
 * - `values` - Get the values of the dict.
 */
declare function enhance(obj: Dict): {
    subscribe: (this: void, run: svelte_store.Subscriber<Dict>, invalidate?: svelte_store.Invalidator<Dict> | undefined) => svelte_store.Unsubscriber;
    add: (key: string, value: unknown) => void;
    clear: () => void;
    contains: (key: string) => boolean;
    copy: () => any;
    fromKeys: (keys: string[], value: unknown) => any;
    get: (key: string, fallback?: unknown) => any;
    invert: () => void;
    keys: () => string[];
    pop: (key: string) => any;
    popitem: () => any[] | null;
    values: () => any[];
};

/**
 * filter unwanted values.
 *
 * @param obj - the object to be filtered
 *
 * @param filter - the filter function, if the function returns true, the value will be removed.
 *
 * @example
 * ```ts
 * filter({ a: 1, b: 2, c: 3 }, (value) => value === 2) // { a: 1, c: 3 }
 * ```
 *
 * @returns the filtered object
 */
declare function filter<RemovedKeys extends string, T>(obj: Record<string | number | symbol, any>, filter?: (value: any) => boolean): Omit<T, RemovedKeys>;

/**
 * Invert a object (swap keys and values)
 *
 * @param obj - The object to invert.
 *
 * @example
 * ```ts
 * invert({ a: 1, b: 2, c: 3 }) // { 1: "a", 2: "b", 3: "c" }
 * ```
 *
 * @returns The inverted object.
 */
declare function invert<Key extends string | number | symbol, Value extends string | number | symbol>(obj: Record<string, Value>): Record<Value, Key>;

/**
 * Convert an object to a list of items.
 *
 * @param obj - The object to convert.
 *
 * @param toItem - The function to convert each key-value pair to an item.
 *
 * @example
 * ```ts
 * listify({ a: 1, b: 2, c: 3 }, (key, value) => ({ key, value })) // [
 * 	// ["a", 1]
 * 	// ["b", 2]
 * 	// ["c", 3]
 * // ]
 * ```
 * @returns The list of items.
 */
declare function listify<Value, Key extends string | number | symbol, KResult>(obj: Record<Key, Value>, toItem: (key: Key, value: Value) => KResult): KResult[];

/**
 * Gets the new object with the specified keys from the original object.
 *
 * @param obj - The original object.
 *
 * @param keys - The keys to pick.
 *
 * @param omitUndefined - If true, the keys with undefined values will be omitted.
 *
 * @example
 * ```ts
 * picker({ a: 1, b: 2, c: 3 }, ["a", "b"]) // { a: 1, b: 2 }
 * ```
 *
 * @returns The new object with the specified keys from the original object
 */
declare function picker<O extends Record<string | number | symbol, any>, T extends keyof O>(obj: O, keys: T[], omitUndefined?: boolean): Pick<O, T>;

/**
 * Remove the given keys from the given object.
 *
 * @param obj - The object to remove keys from.
 *
 * @param keys - The keys to remove.
 *
 * @example
 * ```ts
 * const obj = { a: 1, b: 2, c: 3 }
 * pops(obj, ["a", "b"])
 * console.log(obj) // { c: 3 }
 * ```
 *
 */
declare function pops<T, K extends keyof T>(obj: T, keys: K[]): void;

export { contains, enhance, filter, invert, listify, picker, pops };
