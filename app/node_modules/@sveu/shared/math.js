import {
  toNumber
} from "./chunk-G47UHES5.js";
import "./chunk-KLNSLHAC.js";

// src/math/arithmetic/index.ts
function sum(...args) {
  let result = 0;
  for (const arg of args) {
    if (Array.isArray(arg)) {
      for (const item of arg) {
        result += toNumber(item);
      }
    } else {
      result += toNumber(arg);
    }
  }
  return result;
}
function subtract(...args) {
  let result = 0;
  for (const arg of args) {
    if (Array.isArray(arg)) {
      for (const item of arg) {
        if (result === 0)
          result = toNumber(item);
        else
          result -= toNumber(item);
      }
    } else {
      if (result === 0)
        result = toNumber(arg);
      else
        result -= toNumber(arg);
    }
  }
  return result;
}
function multiply(...args) {
  let result = 1;
  for (const arg of args) {
    if (Array.isArray(arg)) {
      for (const item of arg) {
        result *= toNumber(item);
      }
    } else {
      result *= toNumber(arg);
    }
  }
  return result;
}
function divide(...args) {
  let result;
  for (const arg of args) {
    if (Array.isArray(arg)) {
      for (const item of arg) {
        if (result === void 0)
          result = toNumber(item);
        else {
          result /= toNumber(item);
        }
      }
    } else {
      if (result === void 0)
        result = toNumber(arg);
      else
        result /= toNumber(arg);
    }
  }
  if (result === void 0)
    result = 0;
  return result;
}
function average(...args) {
  return sum(...args) / args.flat().length;
}
function max(...args) {
  let result = -Infinity;
  for (const arg of args) {
    if (Array.isArray(arg)) {
      for (const item of arg) {
        result = Math.max(result, toNumber(item));
      }
    } else {
      result = Math.max(result, toNumber(arg));
    }
  }
  return result;
}
function min(...args) {
  let result = Infinity;
  for (const arg of args) {
    if (Array.isArray(arg)) {
      for (const item of arg) {
        result = Math.min(result, toNumber(item));
      }
    } else {
      result = Math.min(result, toNumber(arg));
    }
  }
  return result;
}

// src/math/clamp/index.ts
function clamp(value, min2, max2) {
  return Math.min(max2, Math.max(min2, value));
}

// src/math/precision/index.ts
function precision(value, digits, options) {
  const power = 10 ** digits;
  return Math[(options == null ? void 0 : options.math) || "round"](value * power) / power;
}

// src/math/random/index.ts
function random(min2, max2) {
  min2 = Math.ceil(min2);
  max2 = Math.floor(max2);
  return Math.floor(Math.random() * (max2 - min2 + 1)) + min2;
}
export {
  average,
  clamp,
  divide,
  max,
  min,
  multiply,
  precision,
  random,
  subtract,
  sum
};
